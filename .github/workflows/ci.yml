name: CI/CD Pipeline

on:
  push:
    branches:
      - stdio
  pull_request:
    branches:
      - stdio

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: rootaccountsav
          POSTGRES_PASSWORD: r00tsav
          POSTGRES_DB: rootdbsav
        ports:
          - 5435:5432
        options: >-
          --health-cmd="pg_isready -U rootaccountsav -d rootdbsav"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 3: Cache dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest gunicorn uvicorn dockerize

      # Step 5: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -U rootaccountsav -d rootdbsav -p 5435; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          echo "PostgreSQL is ready!"

      # Step 6: Run migrations
      - name: Apply migrations
        run: |
          python manage.py makemigrations customerorder
          python manage.py migrate

      # Step 7: Collect static files
      - name: Collect static files
        run: python manage.py collectstatic --noinput

      # Step 8: Run tests with coverage
      - name: Run tests
        run: |
          coverage run -m pytest app/customerorder/tests/unit/test_cust.py
          coverage report
          coverage xml

      # Step 9: Build Docker image
      - name: Build Docker image
        run: docker build -t customer-order-system:latest .

      # Step 10: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 11: Push Docker image to Docker Hub
      - name: Push Docker image
        if: github.ref == 'refs/heads/stdio'
        run: |
          docker tag customer-order-system:latest ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 12: Deploy application
      - name: SSH to Production Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest
            docker stop customer-order-system || true
            docker rm customer-order-system || true
            docker run -d --name customer-order-system \
              -p 8000:8000 \
              --env-file /path/to/.env \
              ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest
