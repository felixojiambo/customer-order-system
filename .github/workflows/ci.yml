name: CI/CD Pipeline

on:
  # Trigger for pushes and pull requests on the `stdio` branch
  push:
    branches:
      - stdio
  pull_request:
    branches:
      - stdio

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: rootaccountsav
          POSTGRES_PASSWORD: r00tsav
          POSTGRES_DB: rootdbsav
        ports:
          - 5435:5432
        options: >-
          --health-cmd="pg_isready -U rootaccountsav -d rootdbsav"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest flake8

      # Linting is disabled. Uncomment if needed
      # - name: Lint with flake8
      #   run: flake8 app/

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5435; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Apply migrations
        run: python manage.py migrate

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t customer-order-system:latest .

      - name: Run tests with coverage
        run: |
          coverage run -m pytest app/tests
          coverage report
          coverage xml

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        if: github.ref == 'refs/heads/stdio'
        run: |
          docker tag customer-order-system:latest ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest
