name: CI/CD Pipeline

on:
  push:
    branches:
      - stdio
  pull_request:
    branches:
      - stdio

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Django Settings
      DEBUG: 'False'  # It's recommended to set DEBUG to False in CI/CD
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

      # PostgreSQL Settings
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432

      # Africa's Talking API Credentials
      AFRICASTALKING_USERNAME: ${{ secrets.AFRICASTALKING_USERNAME }}
      AFRICASTALKING_API_KEY: ${{ secrets.AFRICASTALKING_API_KEY }}

      # Firebase Configuration
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
      FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
      FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}

      # Logging Configuration
      LOGGING_LEVEL: ERROR
      LOGGING_FILE_PATH: error.log
      FIREBASE_CREDENTIALS_PATH: ./config/firebase/firebase_credentials.json

      # Allowed Hosts
      ALLOWED_HOSTS: localhost,127.0.0.1

      # CORS Allowed Origins
      CORS_ALLOWED_ORIGINS: http://localhost:4200,http://127.0.0.1:4200

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest gunicorn uvicorn dockerize

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U $POSTGRES_USER
            if [ $? -eq 0 ]; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready yet. Waiting..."
            sleep 2
          done

      - name: Apply Migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      - name: Collect Static Files
        run: python manage.py collectstatic --noinput

      - name: Run Tests with Coverage
        run: |
          coverage run -m pytest app/tests
          coverage report
          coverage xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/customer-order-system:latest

      - name: Post Deployment Steps (Optional)
        if: github.ref == 'refs/heads/stdio'
        run: |
          echo "Deployment steps can be added here, such as notifying a server or triggering a webhook."

